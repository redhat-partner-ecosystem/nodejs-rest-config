apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: git
  name: github-update-deployment
  labels:
    operator.tekton.dev/provider-type: community
spec:
  description: This task can be used to update image digest in a Git repo using kustomize
  params:
    - name: MANIFESTS_GIT
      type: string
    - name: MANIFESTS_GIT_BRANCH
      type: string

    - name: GIT_REVISION
      type: string
    - name: GIT_PUSHER_NAME
      type: string
    - name: GIT_PUSHER_EMAIL
      type: string
    - name: GIT_COMMIT_MESSAGE
      type: string

    - name: CURRENT_IMAGE
      type: string
    - name: NEW_IMAGE
      type: string
    - name: NEW_DIGEST
      type: string
    - name: KUSTOMIZATION_PATH
      type: string
  workspaces:
    - description: The workspace consisting of maven project.
      name: workspace

  results:
    - name: commit
      description: The commit SHA

  stepTemplate:
    envFrom:
      - secretRef:
          name: github-secrets

  steps:
    - name: validate-github
      image: image-registry.openshift-image-registry.svc:5000/nodejs-gitops-pipeline/gitops-cli:latest
      workingDir: $(workspaces.workspace.path)
      script: |
        echo "-> Validating authentication against github.com"

        gh auth status

    - name: update-digest
      image: image-registry.openshift-image-registry.svc:5000/nodejs-gitops-pipeline/gitops-cli:latest
      workingDir: $(workspaces.workspace.path)
      script: |
        cd git-update-digest-workdir/$(params.KUSTOMIZATION_PATH)

        # setup git and gh
        echo "-> setup git and gh"

        git config --global user.email "$(params.GIT_PUSHER_EMAIL)"

        git config --global user.name "$(params.GIT_PUSHER_NAME)"

        gh auth setup-git

        # clone the repo
        echo "-> cloning $(params.MANIFESTS_GIT)"
        git clone $(params.MANIFESTS_GIT) git-update-digest-workdir

        git checkout -b $(params.MANIFESTS_GIT_BRANCH)

        # create a patch 
        echo "-> patching kustomization.yaml"

        echo "resources:\n\t$(params.NEW_IMAGE)" > kustomization.yaml

        git status

        # commit and push
        echo "-> push to branch $(params.MANIFESTS_GIT_BRANCH)"
        
        export COMMIT_MSG="pr@$(params.GIT_REVISION)"

        git commit -am $COMMIT_MSG
        
        git status

        git push origin $(params.MANIFESTS_GIT_BRANCH)

        RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
        EXIT_CODE="$?"
        if [ "$EXIT_CODE" != 0 ]
        then
          exit $EXIT_CODE
        fi

        # create a PR
        echo "-> create a PR"
        
        gh pr create --base main --head "$RESULT_SHA" --title $COMMIT_MSG --body $COMMIT_MSG

        # Make sure we don't add a trailing newline to the result!
        echo -n "$RESULT_SHA" > $(results.commit.path)